% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metabin_wrap.R
\name{metabin_wrap}
\alias{metabin_wrap}
\title{Wrapper around meta::metabin}
\usage{
metabin_wrap(
  data,
  event_colnames,
  n_colnames = paste0("n_", event_colnames),
  by_var,
  stud_lab,
  ...
)
}
\arguments{
\item{data}{Data.frame containing study information}

\item{event_colnames}{List of paired experimental - control column names with event counts}

\item{n_colnames}{n counts, see Details.}

\item{by_var}{Character vector, subgroup variables}

\item{stud_lab}{Character string, id col for each study}

\item{...}{Additional arguments to be passed to metabin (method, sm...).}
}
\value{
meta::metabin models, with very slight difference (subset and call parameters).
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Compute a meta analysis of binary events,
and allows for multiple subgroup analyses.
\code{event_colnames} is similar to \code{event.e} and \code{event.c}
in meta::metabin, and \code{n_colnames} is similar to \code{n.e} and \code{n.c}, but they use
character strings as inputs. The \verb{*_colnames} args also cover more usecase to
prevent metabin failure, in particular when there are missing data.
\code{by_var} is different from \code{byvar} in metabin (by_var is a character string).
The same is true for \code{stud_lab}.
}
\examples{


tnsc_data |>
  dplyr::filter(term_name == "myocardial_infarction") |>
  metabin_wrap(
    event_colnames = c("event_e", "event_c"),
    n_colnames = c("n_e", "n_c"),
    by_var = c("byvar1", "byvar2"),
    stud_lab = "study_id"
  )
}
